package com.course.courseselection.authentication;import com.course.courseselection.security.JwtUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import org.springframework.web.filter.OncePerRequestFilter;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public abstract class AuthenticationTokenFilter extends OncePerRequestFilter {    @Value("${jwt.token.header.key}")    private String tokenHeaderKey;    @Value("${jwt.token.head}")    private String tokenHead;    @Autowired    private JwtUtils jwtUtils;    private UserDetailsService userDetailsService;    private AntPathRequestMatcher matcher;    @Autowired    public AuthenticationTokenFilter(UserDetailsService userDetailsService, AntPathRequestMatcher matcher) {        this.userDetailsService = userDetailsService;        this.matcher = matcher;    }    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)            throws ServletException, IOException {        final String authHeader = request.getHeader(tokenHeaderKey);        if (matcher.matches(request) && authHeader != null && authHeader.startsWith(tokenHead)) {            final String authToken = authHeader.substring(tokenHead.length());            String username = jwtUtils.getUsernameFromToken(authToken);            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {                UserDetails userDetails = userDetailsService.loadUserByUsername(username);                if (jwtUtils.validateToken(authToken, userDetails)) {                    UsernamePasswordAuthenticationToken authentication                            = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());                    authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                    SecurityContextHolder.getContext().setAuthentication(authentication);                }            }        }        filterChain.doFilter(request, response);    }}